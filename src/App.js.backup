// File: src/App.js
// Complete hotel app with guest interface AND staff dashboard

import { BrowserRouter, Routes, Route } from 'react-router-dom';
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './App.css';

// Staff Dashboard Component
const HotelStaffDashboard = () => {
  const [activeTab, setActiveTab] = useState('overview');
  const [user, setUser] = useState({
    name: 'Sarah Johnson',
    role: 'Front Desk Manager',
    avatar: 'üë©‚Äçüíº',
    permissions: ['all']
  });
  
  const [bookings, setBookings] = useState([
    {
      id: 'TRN001',
      type: 'Transportation',
      guest: 'Nathan Johnson',
      room: '425',
      service: 'Airport Shuttle',
      destination: 'Airport',
      time: '2:00 PM',
      status: 'pending',
      assignedTo: 'unassigned',
      priority: 'high',
      createdAt: '10 min ago'
    },
    {
      id: 'SPA002',
      type: 'Spa',
      guest: 'Maria Garcia',
      room: '312',
      service: 'Deep Tissue Massage',
      time: '3:00 PM',
      status: 'confirmed',
      assignedTo: 'Lisa Chen',
      priority: 'medium',
      createdAt: '25 min ago'
    },
    {
      id: 'HMS003',
      type: 'Housekeeping',
      guest: 'David Wilson',
      room: '208',
      service: 'Room Cleaning',
      time: 'ASAP',
      status: 'in-progress',
      assignedTo: 'Miguel Santos',
      priority: 'medium',
      createdAt: '45 min ago'
    },
    {
      id: 'DIN004',
      type: 'Restaurant',
      guest: 'Sophie Martin',
      room: '501',
      service: 'Le Jardin',
      time: '7:30 PM',
      status: 'confirmed',
      assignedTo: 'Restaurant Team',
      priority: 'low',
      createdAt: '1 hour ago'
    },
    {
      id: 'CON005',
      type: 'Concierge',
      guest: 'James Lee',
      room: '156',
      service: 'City Tour Booking',
      time: 'Tomorrow',
      status: 'pending',
      assignedTo: 'unassigned',
      priority: 'low',
      createdAt: '2 hours ago'
    }
  ]);

  const [staff, setStaff] = useState([
    { id: 1, name: 'Lisa Chen', role: 'Spa Therapist', status: 'available', avatar: 'üë©‚Äç‚öïÔ∏è' },
    { id: 2, name: 'Miguel Santos', role: 'Housekeeping', status: 'busy', avatar: 'üë®‚Äçüíº' },
    { id: 3, name: 'Alex Rodriguez', role: 'Concierge', status: 'available', avatar: 'üë®‚Äçüíº' },
    { id: 4, name: 'Emma Thompson', role: 'Driver', status: 'available', avatar: 'üë©‚Äç‚úàÔ∏è' },
    { id: 5, name: 'Restaurant Team', role: 'Dining', status: 'available', avatar: 'üë•' }
  ]);

  const [notifications, setNotifications] = useState([
    { id: 1, message: 'New transportation request from Room 425', time: '2 min ago', type: 'urgent' },
    { id: 2, message: 'Room 312 spa appointment confirmed', time: '15 min ago', type: 'success' },
    { id: 3, message: 'Housekeeping completed for Room 208', time: '30 min ago', type: 'info' }
  ]);

  const updateBookingStatus = (bookingId, newStatus, assignedTo = null) => {
    setBookings(prev => prev.map(booking => 
      booking.id === bookingId 
        ? { ...booking, status: newStatus, assignedTo: assignedTo || booking.assignedTo }
        : booking
    ));
    
    const booking = bookings.find(b => b.id === bookingId);
    if (booking) {
      const newNotif = {
        id: Date.now(),
        message: `${booking.type} request ${bookingId} status updated to ${newStatus}`,
        time: 'now',
        type: newStatus === 'confirmed' ? 'success' : newStatus === 'cancelled' ? 'error' : 'info'
      };
      setNotifications(prev => [newNotif, ...prev.slice(0, 4)]);
    }
  };

  const assignStaff = (bookingId, staffName) => {
    setBookings(prev => prev.map(booking => 
      booking.id === bookingId 
        ? { ...booking, assignedTo: staffName, status: 'assigned' }
        : booking
    ));
    
    const staffMember = staff.find(s => s.name === staffName);
    if (staffMember) {
      setStaff(prev => prev.map(s => 
        s.name === staffName ? { ...s, status: 'busy' } : s
      ));
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'pending': return '#f59e0b';
      case 'confirmed': return '#10b981';
      case 'in-progress': return '#3b82f6';
      case 'completed': return '#6b7280';
      case 'cancelled': return '#ef4444';
      case 'assigned': return '#8b5cf6';
      default: return '#6b7280';
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'high': return '#ef4444';
      case 'medium': return '#f59e0b';
      case 'low': return '#10b981';
      default: return '#6b7280';
    }
  };

  const getTypeIcon = (type) => {
    switch (type) {
      case 'Transportation': return 'üöó';
      case 'Spa': return 'üßò‚Äç‚ôÄÔ∏è';
      case 'Housekeeping': return 'üßπ';
      case 'Restaurant': return 'üçΩÔ∏è';
      case 'Concierge': return 'üé≠';
      case 'Business': return 'üíº';
      default: return 'üè®';
    }
  };

  const stats = {
    totalBookings: bookings.length,
    pendingRequests: bookings.filter(b => b.status === 'pending').length,
    activeServices: bookings.filter(b => ['confirmed', 'in-progress', 'assigned'].includes(b.status)).length,
    availableStaff: staff.filter(s => s.status === 'available').length
  };

  const OverviewTab = () => (
    <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '24px' }}>
        <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 1px 3px rgba(0,0,0,0.1)' }}>
          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
            <div>
              <p style={{ fontSize: '14px', color: '#6b7280', marginBottom: '4px' }}>Total Bookings</p>
              <p style={{ fontSize: '24px', fontWeight: 'bold', color: '#111827' }}>{stats.totalBookings}</p>
            </div>
            <div style={{ background: '#dbeafe', padding: '12px', borderRadius: '8px' }}>
              <span style={{ fontSize: '24px' }}>üìä</span>
            </div>
          </div>
        </div>
        
        <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 1px 3px rgba(0,0,0,0.1)' }}>
          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
            <div>
              <p style={{ fontSize: '14px', color: '#6b7280', marginBottom: '4px' }}>Pending Requests</p>
              <p style={{ fontSize: '24px', fontWeight: 'bold', color: '#f59e0b' }}>{stats.pendingRequests}</p>
            </div>
            <div style={{ background: '#fef3c7', padding: '12px', borderRadius: '8px' }}>
              <span style={{ fontSize: '24px' }}>‚è∞</span>
            </div>
          </div>
        </div>
        
        <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 1px 3px rgba(0,0,0,0.1)' }}>
          <div>
            <p style={{ fontSize: '14px', color: '#6b7280', marginBottom: '4px' }}>Active Services</p>
            <p style={{ fontSize: '24px', fontWeight: 'bold', color: '#10b981' }}>{stats.activeServices}</p>
          </div>
        </div>
        
        <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 1px 3px rgba(0,0,0,0.1)' }}>
          <div>
            <p style={{ fontSize: '14px', color: '#6b7280', marginBottom: '4px' }}>Available Staff</p>
            <p style={{ fontSize: '24px', fontWeight: 'bold', color: '#3b82f6' }}>{stats.availableStaff}</p>
          </div>
        </div>
      </div>

      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(400px, 1fr))', gap: '24px' }}>
        <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 1px 3px rgba(0,0,0,0.1)' }}>
          <h3 style={{ fontSize: '18px', fontWeight: '600', marginBottom: '16px', color: '#111827' }}>üö® Urgent Requests</h3>
          <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
            {bookings.filter(b => b.priority === 'high' || b.status === 'pending').slice(0, 3).map(booking => (
              <div key={booking.id} style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', padding: '12px', background: '#fef2f2', borderRadius: '8px', border: '1px solid #fecaca' }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                  <span style={{ fontSize: '20px' }}>{getTypeIcon(booking.type)}</span>
                  <div>
                    <p style={{ fontWeight: '500', color: '#111827' }}>{booking.guest} - Room {booking.room}</p>
                    <p style={{ fontSize: '14px', color: '#6b7280' }}>{booking.service}</p>
                  </div>
                </div>
                <button 
                  onClick={() => updateBookingStatus(booking.id, 'confirmed')}
                  style={{ background: '#dc2626', color: 'white', padding: '6px 12px', borderRadius: '4px', border: 'none', fontSize: '12px', fontWeight: '500', cursor: 'pointer' }}
                >
                  Handle
                </button>
              </div>
            ))}
          </div>
        </div>

        <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 1px 3px rgba(0,0,0,0.1)' }}>
          <h3 style={{ fontSize: '18px', fontWeight: '600', marginBottom: '16px', color: '#111827' }}>üîî Recent Activity</h3>
          <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
            {notifications.slice(0, 5).map(notif => (
              <div key={notif.id} style={{ display: 'flex', alignItems: 'flex-start', gap: '12px', padding: '12px', background: '#f9fafb', borderRadius: '8px' }}>
                <div style={{ 
                  width: '8px', 
                  height: '8px', 
                  borderRadius: '50%', 
                  marginTop: '8px',
                  background: notif.type === 'urgent' ? '#ef4444' : notif.type === 'success' ? '#10b981' : '#3b82f6'
                }}></div>
                <div style={{ flex: 1 }}>
                  <p style={{ fontSize: '14px', color: '#111827' }}>{notif.message}</p>
                  <p style={{ fontSize: '12px', color: '#6b7280' }}>{notif.time}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );

  const BookingsTab = () => (
    <div style={{ background: 'white', borderRadius: '12px', boxShadow: '0 1px 3px rgba(0,0,0,0.1)' }}>
      <div style={{ padding: '24px', borderBottom: '1px solid #e5e7eb' }}>
        <h3 style={{ fontSize: '18px', fontWeight: '600', color: '#111827' }}>All Bookings</h3>
        <p style={{ fontSize: '14px', color: '#6b7280' }}>Manage guest requests and service bookings</p>
      </div>
      <div style={{ overflowX: 'auto' }}>
        <table style={{ width: '100%', borderCollapse: 'collapse' }}>
          <thead style={{ background: '#f9fafb' }}>
            <tr>
              <th style={{ textAlign: 'left', padding: '12px 24px', fontSize: '14px', fontWeight: '500', color: '#6b7280' }}>Request</th>
              <th style={{ textAlign: 'left', padding: '12px 24px', fontSize: '14px', fontWeight: '500', color: '#6b7280' }}>Guest</th>
              <th style={{ textAlign: 'left', padding: '12px 24px', fontSize: '14px', fontWeight: '500', color: '#6b7280' }}>Service</th>
              <th style={{ textAlign: 'left', padding: '12px 24px', fontSize: '14px', fontWeight: '500', color: '#6b7280' }}>Time</th>
              <th style={{ textAlign: 'left', padding: '12px 24px', fontSize: '14px', fontWeight: '500', color: '#6b7280' }}>Status</th>
              <th style={{ textAlign: 'left', padding: '12px 24px', fontSize: '14px', fontWeight: '500', color: '#6b7280' }}>Assigned To</th>
              <th style={{ textAlign: 'left', padding: '12px 24px', fontSize: '14px', fontWeight: '500', color: '#6b7280' }}>Actions</th>
            </tr>
          </thead>
          <tbody>
            {bookings.map(booking => (
              <tr key={booking.id} style={{ borderBottom: '1px solid #e5e7eb' }}>
                <td style={{ padding: '16px 24px' }}>
                  <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                    <span style={{ fontSize: '18px' }}>{getTypeIcon(booking.type)}</span>
                    <div>
                      <p style={{ fontWeight: '500', color: '#111827' }}>{booking.id}</p>
                      <p style={{ fontSize: '12px', color: '#6b7280' }}>{booking.createdAt}</p>
                    </div>
                    <div style={{ width: '8px', height: '8px', borderRadius: '50%', background: getPriorityColor(booking.priority) }}></div>
                  </div>
                </td>
                <td style={{ padding: '16px 24px' }}>
                  <div>
                    <p style={{ fontWeight: '500', color: '#111827' }}>{booking.guest}</p>
                    <p style={{ fontSize: '14px', color: '#6b7280' }}>Room {booking.room}</p>
                  </div>
                </td>
                <td style={{ padding: '16px 24px' }}>
                  <p style={{ color: '#111827' }}>{booking.service}</p>
                  {booking.destination && <p style={{ fontSize: '14px', color: '#6b7280' }}>to {booking.destination}</p>}
                </td>
                <td style={{ padding: '16px 24px', color: '#111827' }}>{booking.time}</td>
                <td style={{ padding: '16px 24px' }}>
                  <span 
                    style={{ 
                      padding: '4px 8px', 
                      borderRadius: '20px', 
                      fontSize: '12px', 
                      fontWeight: '500', 
                      color: 'white',
                      background: getStatusColor(booking.status)
                    }}
                  >
                    {booking.status}
                  </span>
                </td>
                <td style={{ padding: '16px 24px' }}>
                  {booking.assignedTo === 'unassigned' ? (
                    <select 
                      onChange={(e) => assignStaff(booking.id, e.target.value)}
                      style={{ fontSize: '14px', border: '1px solid #d1d5db', borderRadius: '4px', padding: '4px 8px' }}
                    >
                      <option value="">Assign Staff</option>
                      {staff.filter(s => s.status === 'available').map(staffMember => (
                        <option key={staffMember.id} value={staffMember.name}>
                          {staffMember.avatar} {staffMember.name}
                        </option>
                      ))}
                    </select>
                  ) : (
                    <span style={{ fontSize: '14px', color: '#111827' }}>{booking.assignedTo}</span>
                  )}
                </td>
                <td style={{ padding: '16px 24px' }}>
                  <div style={{ display: 'flex', gap: '8px' }}>
                    {booking.status === 'pending' && (
                      <>
                        <button 
                          onClick={() => updateBookingStatus(booking.id, 'confirmed')}
                          style={{ background: '#10b981', color: 'white', padding: '4px 8px', borderRadius: '4px', border: 'none', fontSize: '12px', cursor: 'pointer' }}
                        >
                          Confirm
                        </button>
                        <button 
                          onClick={() => updateBookingStatus(booking.id, 'cancelled')}
                          style={{ background: '#ef4444', color: 'white', padding: '4px 8px', borderRadius: '4px', border: 'none', fontSize: '12px', cursor: 'pointer' }}
                        >
                          Cancel
                        </button>
                      </>
                    )}
                    {booking.status === 'in-progress' && (
                      <button 
                        onClick={() => updateBookingStatus(booking.id, 'completed')}
                        style={{ background: '#3b82f6', color: 'white', padding: '4px 8px', borderRadius: '4px', border: 'none', fontSize: '12px', cursor: 'pointer' }}
                      >
                        Complete
                      </button>
                    )}
                    {booking.status === 'confirmed' && (
                      <button 
                        onClick={() => updateBookingStatus(booking.id, 'in-progress')}
                        style={{ background: '#f59e0b', color: 'white', padding: '4px 8px', borderRadius: '4px', border: 'none', fontSize: '12px', cursor: 'pointer' }}
                      >
                        Start
                      </button>
                    )}
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );

  const StaffTab = () => (
    <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr', gap: '24px' }}>
      <div style={{ background: 'white', borderRadius: '12px', boxShadow: '0 1px 3px rgba(0,0,0,0.1)' }}>
        <div style={{ padding: '24px', borderBottom: '1px solid #e5e7eb' }}>
          <h3 style={{ fontSize: '18px', fontWeight: '600', color: '#111827' }}>Staff Management</h3>
          <p style={{ fontSize: '14px', color: '#6b7280' }}>Monitor staff availability and assignments</p>
        </div>
        <div style={{ padding: '24px' }}>
          <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
            {staff.map(staffMember => (
              <div key={staffMember.id} style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', padding: '16px', background: '#f9fafb', borderRadius: '8px' }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
                  <div style={{ fontSize: '24px' }}>{staffMember.avatar}</div>
                  <div>
                    <p style={{ fontWeight: '500', color: '#111827' }}>{staffMember.name}</p>
                    <p style={{ fontSize: '14px', color: '#6b7280' }}>{staffMember.role}</p>
                  </div>
                </div>
                <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
                  <span style={{ 
                    padding: '4px 12px', 
                    borderRadius: '20px', 
                    fontSize: '12px', 
                    fontWeight: '500',
                    background: staffMember.status === 'available' ? '#dcfce7' : '#fee2e2',
                    color: staffMember.status === 'available' ? '#166534' : '#991b1b'
                  }}>
                    {staffMember.status}
                  </span>
                  <button style={{ color: '#3b82f6', fontSize: '14px', fontWeight: '500', background: 'none', border: 'none', cursor: 'pointer' }}>
                    View Tasks
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>
        <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 1px 3px rgba(0,0,0,0.1)' }}>
          <h4 style={{ fontWeight: '600', color: '#111827', marginBottom: '16px' }}>Staff Status</h4>
          <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <span style={{ fontSize: '14px', color: '#6b7280' }}>Available</span>
              <span style={{ fontSize: '14px', fontWeight: '500', color: '#10b981' }}>
                {staff.filter(s => s.status === 'available').length}
              </span>
            </div>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <span style={{ fontSize: '14px', color: '#6b7280' }}>Busy</span>
              <span style={{ fontSize: '14px', fontWeight: '500', color: '#ef4444' }}>
                {staff.filter(s => s.status === 'busy').length}
              </span>
            </div>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <span style={{ fontSize: '14px', color: '#6b7280' }}>Total Staff</span>
              <span style={{ fontSize: '14px', fontWeight: '500', color: '#111827' }}>{staff.length}</span>
            </div>
          </div>
        </div>

        <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 1px 3px rgba(0,0,0,0.1)' }}>
          <h4 style={{ fontWeight: '600', color: '#111827', marginBottom: '16px' }}>Department Breakdown</h4>
          <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <span style={{ fontSize: '14px', color: '#6b7280' }}>Housekeeping</span>
              <span style={{ fontSize: '14px', fontWeight: '500' }}>1</span>
            </div>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <span style={{ fontSize: '14px', color: '#6b7280' }}>Concierge</span>
              <span style={{ fontSize: '14px', fontWeight: '500' }}>1</span>
            </div>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <span style={{ fontSize: '14px', color: '#6b7280' }}>Spa</span>
              <span style={{ fontSize: '14px', fontWeight: '500' }}>1</span>
            </div>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <span style={{ fontSize: '14px', color: '#6b7280' }}>Transportation</span>
              <span style={{ fontSize: '14px', fontWeight: '500' }}>1</span>
            </div>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <span style={{ fontSize: '14px', color: '#6b7280' }}>Restaurant</span>
              <span style={{ fontSize: '14px', fontWeight: '500' }}>1</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div style={{ minHeight: '100vh', background: '#f3f4f6' }}>
      {/* Header */}
      <div style={{ background: 'white', borderBottom: '1px solid #e5e7eb' }}>
        <div style={{ maxWidth: '1200px', margin: '0 auto', padding: '0 24px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '16px 0' }}>
            <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
              <div style={{ fontSize: '24px', fontWeight: 'bold', background: 'linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%)', backgroundClip: 'text', WebkitBackgroundClip: 'text', WebkitTextFillColor: 'transparent' }}>
                üè® Digierge Staff
              </div>
              <div style={{ color: '#6b7280' }}>|</div>
              <div style={{ color: '#6b7280', fontWeight: '500' }}>The Grand Hotel</div>
            </div>
            
            <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
              <div style={{ position: 'relative' }}>
                <button style={{ padding: '8px', color: '#6b7280', background: 'none', border: 'none', cursor: 'pointer', position: 'relative' }}>
                  <span style={{ fontSize: '20px' }}>üîî</span>
                  {notifications.filter(n => n.type === 'urgent').length > 0 && (
                    <span style={{ position: 'absolute', top: '-4px', right: '-4px', background: '#ef4444', color: 'white', fontSize: '12px', borderRadius: '50%', width: '20px', height: '20px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                      {notifications.filter(n => n.type === 'urgent').length}
                    </span>
                  )}
                </button>
              </div>
              <div style={{ display: 'flex', alignItems: 'center', gap: '12px', paddingLeft: '16px', borderLeft: '1px solid #e5e7eb' }}>
                <div style={{ fontSize: '24px' }}>{user.avatar}</div>
                <div>
                  <p style={{ fontSize: '14px', fontWeight: '500', color: '#111827' }}>{user.name}</p>
                  <p style={{ fontSize: '12px', color: '#6b7280' }}>{user.role}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Navigation Tabs */}
      <div style={{ background: 'white', borderBottom: '1px solid #e5e7eb' }}>
        <div style={{ maxWidth: '1200px', margin: '0 auto', padding: '0 24px' }}>
          <nav style={{ display: 'flex', gap: '32px' }}>
            {[
              { id: 'overview', label: 'Overview', icon: 'üìä' },
              { id: 'bookings', label: 'Bookings', icon: 'üìã' },
              { id: 'staff', label: 'Staff', icon: 'üë•' }
            ].map(tab => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                style={{
                  display: 'flex',
                  alignItems: 'center',
                  gap: '8px',
                  padding: '16px 4px',
                  borderBottom: activeTab === tab.id ? '2px solid #3b82f6' : '2px solid transparent',
                  fontWeight: '500',
                  fontSize: '14px',
                  color: activeTab === tab.id ? '#3b82f6' : '#6b7280',
                  background: 'none',
                  border: 'none',
                  borderBottom: activeTab === tab.id ? '2px solid #3b82f6' : '2px solid transparent',
                  cursor: 'pointer'
                }}
              >
                <span>{tab.icon}</span>
                <span>{tab.label}</span>
              </button>
            ))}
          </nav>
        </div>
      </div>

      {/* Main Content */}
      <div style={{ maxWidth: '1200px', margin: '0 auto', padding: '32px 24px' }}>
        {activeTab === 'overview' && <OverviewTab />}
        {activeTab === 'bookings' && <BookingsTab />}
        {activeTab === 'staff' && <StaffTab />}
      </div>
    </div>
  );
};

// Main Guest App Component
const App = () => {
  const [currentView, setCurrentView] = useState('home');
  const [selectedService, setSelectedService] = useState(null);
  const [language, setLanguage] = useState('en');
  const [darkMode, setDarkMode] = useState(false);
  const [guestProfile, setGuestProfile] = useState({
    name: 'Nathan',
    room: '425',
    preferences: ['Vegetarian', 'Window Seat'],
    loyaltyPoints: 2450
  });
  const [notifications, setNotifications] = useState([
    { id: 1, message: 'Your spa appointment is in 30 minutes', time: '2:30 PM', type: 'reminder' },
    { id: 2, message: 'Room service delivered successfully', time: '1:45 PM', type: 'success' }
  ]);
  const [currentTime, setCurrentTime] = useState(new Date());
  const [weather, setWeather] = useState({ temp: 22, condition: 'Clear', icon: 'üå§Ô∏è' });
  const [loading, setLoading] = useState(false);
  const [bookings, setBookings] = useState([]);

  // API Base URL
  const API_BASE = 'http://localhost:5000/api';

  useEffect(() => {
    const timer = setInterval(() => setCurrentTime(new Date()), 60000);
    return () => clearInterval(timer);
  }, []);

  // Translations object (same as before)
  const translations = {
    en: {
      welcome: 'Welcome to',
      subtitle: 'How may we assist you today?',
      services: 'Hotel Services',
      comingSoon: 'Coming Soon!',
      reserve: 'Reserve Table',
      recommended: 'Recommended',
      bookRide: 'Book Ride',
      roomService: 'Room Service',
      housekeeping: 'Housekeeping',
      spa: 'Spa & Wellness',
      concierge: 'Concierge',
      business: 'Business Center',
      localGuide: 'Local Guide',
      profile: 'Profile',
      notifications: 'Notifications',
      darkMode: 'Dark Mode',
      loyaltyPoints: 'Loyalty Points',
      quickOrder: 'Quick Order',
      viewMenu: 'View Menu',
      requestService: 'Request Service',
      bookNow: 'Book Now',
      explore: 'Explore',
      preferences: 'Preferences',
      backToHome: 'Back to Home',
      myBookings: 'My Bookings',
      transportation: 'Transportation',
      dining: 'Dining',
      selectOption: 'Select an option',
      destination: 'Destination',
      restaurant: 'Restaurant',
      time: 'Time',
      guests: 'Guests',
      treatmentType: 'Treatment Type',
      duration: 'Duration',
      request: 'Request',
      book: 'Book',
      order: 'Order',
      close: 'Close'
    },
    es: {
      welcome: 'Bienvenido a',
      subtitle: '¬øC√≥mo podemos ayudarle hoy?',
      services: 'Servicios del Hotel',
      comingSoon: '¬°Pr√≥ximamente!',
      reserve: 'Reservar Mesa',
      recommended: 'Recomendado',
      bookRide: 'Reservar Viaje',
      roomService: 'Servicio de Habitaci√≥n',
      housekeeping: 'Limpieza',
      spa: 'Spa y Bienestar',
      concierge: 'Conserjer√≠a',
      business: 'Centro de Negocios',
      localGuide: 'Gu√≠a Local',
      profile: 'Perfil',
      notifications: 'Notificaciones',
      darkMode: 'Modo Oscuro',
      loyaltyPoints: 'Puntos de Lealtad',
      quickOrder: 'Pedido R√°pido',
      viewMenu: 'Ver Men√∫',
      requestService: 'Solicitar Servicio',
      bookNow: 'Reservar Ahora',
      explore: 'Explorar',
      preferences: 'Preferencias',
      backToHome: 'Volver al Inicio',
      myBookings: 'Mis Reservas',
      transportation: 'Transporte',
      dining: 'Restaurantes',
      selectOption: 'Seleccionar opci√≥n',
      destination: 'Destino',
      restaurant: 'Restaurante',
      time: 'Hora',
      guests: 'Invitados',
      treatmentType: 'Tipo de Tratamiento',
      duration: 'Duraci√≥n',
      request: 'Solicitar',
      book: 'Reservar',
      order: 'Pedir',
      close: 'Cerrar'
    },
    ar: {
      welcome: 'ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ ŸÅŸä',
      subtitle: 'ŸÉŸäŸÅ ŸäŸÖŸÉŸÜŸÜÿß ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ÿßŸÑŸäŸàŸÖÿü',
      services: 'ÿÆÿØŸÖÿßÿ™ ÿßŸÑŸÅŸÜÿØŸÇ',
      comingSoon: 'ŸÇÿ±Ÿäÿ®ÿßŸã!',
      reserve: 'ÿ≠ÿ¨ÿ≤ ÿ∑ÿßŸàŸÑÿ©',
      recommended: 'ŸÖŸàÿµŸâ ÿ®Ÿá',
      bookRide: 'ÿ≠ÿ¨ÿ≤ ÿ±ÿ≠ŸÑÿ©',
      roomService: 'ÿÆÿØŸÖÿ© ÿßŸÑÿ∫ÿ±ŸÅ',
      housekeeping: 'ÿßŸÑÿ™ŸÜÿ∏ŸäŸÅ',
      spa: 'ÿßŸÑÿ≥ÿ®ÿß ŸàÿßŸÑÿπÿßŸÅŸäÿ©',
      concierge: 'ÿßŸÑŸÉŸàŸÜÿ≥Ÿäÿ±ÿ¨',
      business: 'ŸÖÿ±ŸÉÿ≤ ÿßŸÑÿ£ÿπŸÖÿßŸÑ',
      localGuide: 'ÿØŸÑŸäŸÑ ŸÖÿ≠ŸÑŸä',
      profile: 'ÿßŸÑŸÖŸÑŸÅ ÿßŸÑÿ¥ÿÆÿµŸä',
      notifications: 'ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™',
      darkMode: 'ÿßŸÑŸàÿ∂ÿπ ÿßŸÑŸÖÿ∏ŸÑŸÖ',
      loyaltyPoints: 'ŸÜŸÇÿßÿ∑ ÿßŸÑŸàŸÑÿßÿ°',
      quickOrder: 'ÿ∑ŸÑÿ® ÿ≥ÿ±Ÿäÿπ',
      viewMenu: 'ÿπÿ±ÿ∂ ÿßŸÑŸÇÿßÿ¶ŸÖÿ©',
      requestService: 'ÿ∑ŸÑÿ® ÿßŸÑÿÆÿØŸÖÿ©',
      bookNow: 'ÿßÿ≠ÿ¨ÿ≤ ÿßŸÑÿ¢ŸÜ',
      explore: 'ÿßÿ≥ÿ™ŸÉÿ¥ŸÅ',
      preferences: 'ÿßŸÑÿ™ŸÅÿ∂ŸäŸÑÿßÿ™',
      backToHome: 'ÿßŸÑÿπŸàÿØÿ© ŸÑŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©',
      myBookings: 'ÿ≠ÿ¨Ÿàÿ≤ÿßÿ™Ÿä',
      transportation: 'ÿßŸÑŸÜŸÇŸÑ',
      dining: 'ÿßŸÑŸÖÿ∑ÿßÿπŸÖ',
      selectOption: 'ÿßÿÆÿ™ÿ± ÿÆŸäÿßÿ±ÿßŸã',
      destination: 'ÿßŸÑŸàÿ¨Ÿáÿ©',
      restaurant: 'ÿßŸÑŸÖÿ∑ÿπŸÖ',
      time: 'ÿßŸÑŸàŸÇÿ™',
      guests: 'ÿßŸÑÿ∂ŸäŸàŸÅ',
      treatmentType: 'ŸÜŸàÿπ ÿßŸÑÿπŸÑÿßÿ¨',
      duration: 'ÿßŸÑŸÖÿØÿ©',
      request: 'ÿ∑ŸÑÿ®',
      book: 'ÿ≠ÿ¨ÿ≤',
      order: 'ÿ∑ŸÑÿ®',
      close: 'ÿ•ÿ∫ŸÑÿßŸÇ'
    }
  };

  const t = translations[language];

  // Services array (same as before)
  const services = [
    {
      id: 'transportation',
      title: { en: 'Transportation', es: 'Transporte', ar: 'ÿßŸÑŸÜŸÇŸÑ' },
      description: { en: 'Premium rides & transfers', es: 'Traslados premium', ar: 'ŸÜŸÇŸÑ ŸÖÿ™ŸÖŸäÿ≤' },
      icon: 'üöó',
      color: 'linear-gradient(135deg, #3b82f6, #1e40af)'
    },
    {
      id: 'dining',
      title: { en: 'Dining', es: 'Restaurantes', ar: 'ÿßŸÑŸÖÿ∑ÿßÿπŸÖ' },
      description: { en: 'Fine dining & reservations', es: 'Alta cocina y reservas', ar: 'ŸÖÿ∑ÿßÿπŸÖ ÿ±ÿßŸÇŸäÿ©' },
      icon: 'üçΩÔ∏è',
      color: 'linear-gradient(135deg, #f59e0b, #d97706)'
    },
    {
      id: 'roomservice',
      title: { en: 'Room Service', es: 'Servicio de Habitaci√≥n', ar: 'ÿÆÿØŸÖÿ© ÿßŸÑÿ∫ÿ±ŸÅ' },
      description: { en: 'Order to your room', es: 'Pide a tu habitaci√≥n', ar: 'ÿßÿ∑ŸÑÿ® ŸÑÿ∫ÿ±ŸÅÿ™ŸÉ' },
      icon: 'üõéÔ∏è',
      color: 'linear-gradient(135deg, #10b981, #059669)'
    },
    {
      id: 'housekeeping',
      title: { en: 'Housekeeping', es: 'Limpieza', ar: 'ÿßŸÑÿ™ŸÜÿ∏ŸäŸÅ' },
      description: { en: 'Cleaning & maintenance', es: 'Limpieza y mantenimiento', ar: 'ÿßŸÑÿ™ŸÜÿ∏ŸäŸÅ ŸàÿßŸÑÿµŸäÿßŸÜÿ©' },
      icon: 'üßπ',
      color: 'linear-gradient(135deg, #8b5cf6, #7c3aed)'
    },
    {
      id: 'spa',
      title: { en: 'Spa & Wellness', es: 'Spa y Bienestar', ar: 'ÿßŸÑÿ≥ÿ®ÿß ŸàÿßŸÑÿπÿßŸÅŸäÿ©' },
      description: { en: 'Relaxation & treatments', es: 'Relajaci√≥n y tratamientos', ar: 'ÿßŸÑÿßÿ≥ÿ™ÿ±ÿÆÿßÿ° ŸàÿßŸÑÿπŸÑÿßÿ¨ÿßÿ™' },
      icon: 'üßò‚Äç‚ôÄÔ∏è',
      color: 'linear-gradient(135deg, #ec4899, #db2777)'
    },
    {
      id: 'concierge',
      title: { en: 'Concierge', es: 'Conserjer√≠a', ar: 'ÿßŸÑŸÉŸàŸÜÿ≥Ÿäÿ±ÿ¨' },
      description: { en: 'Local recommendations', es: 'Recomendaciones locales', ar: 'ÿ™ŸàÿµŸäÿßÿ™ ŸÖÿ≠ŸÑŸäÿ©' },
      icon: 'üé≠',
      color: 'linear-gradient(135deg, #f97316, #ea580c)'
    },
    {
      id: 'business',
      title: { en: 'Business Center', es: 'Centro de Negocios', ar: 'ŸÖÿ±ŸÉÿ≤ ÿßŸÑÿ£ÿπŸÖÿßŸÑ' },
      description: { en: 'Meeting rooms & services', es: 'Salas de reuni√≥n y servicios', ar: 'ÿ∫ÿ±ŸÅ ÿßŸÑÿßÿ¨ÿ™ŸÖÿßÿπÿßÿ™ ŸàÿßŸÑÿÆÿØŸÖÿßÿ™' },
      icon: 'üíº',
      color: 'linear-gradient(135deg, #6366f1, #4f46e5)'
    },
    {
      id: 'localguide',
      title: { en: 'Local Guide', es: 'Gu√≠a Local', ar: 'ÿØŸÑŸäŸÑ ŸÖÿ≠ŸÑŸä' },
      description: { en: 'City attractions & events', es: 'Atracciones y eventos', ar: 'ŸÖÿπÿßŸÑŸÖ ÿßŸÑŸÖÿØŸäŸÜÿ© ŸàÿßŸÑÿ£ÿ≠ÿØÿßÿ´' },
      icon: 'üó∫Ô∏è',
      color: 'linear-gradient(135deg, #06b6d4, #0891b2)'
    }
  ];

  const getGreeting = () => {
    const hour = currentTime.getHours();
    if (hour < 12) return { en: 'Good Morning', es: 'Buenos D√≠as', ar: 'ÿµÿ®ÿßÿ≠ ÿßŸÑÿÆŸäÿ±' };
    if (hour < 18) return { en: 'Good Afternoon', es: 'Buenas Tardes', ar: 'ŸÖÿ≥ÿßÿ° ÿßŸÑÿÆŸäÿ±' };
    return { en: 'Good Evening', es: 'Buenas Noches', ar: 'ŸÖÿ≥ÿßÿ° ÿßŸÑÿÆŸäÿ±' };
  };

  const getTheme = () => ({
    background: darkMode ? 'linear-gradient(135deg, #1f2937 0%, #111827 100%)' : 'linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%)',
    cardBg: darkMode ? 'rgba(31, 41, 55, 0.9)' : 'rgba(255,255,255,0.95)',
    textPrimary: darkMode ? '#f9fafb' : '#1e293b',
    textSecondary: darkMode ? '#d1d5db' : '#64748b',
    headerBg: darkMode ? 'rgba(31, 41, 55, 0.95)' : 'rgba(255,255,255,0.95)'
  });

  const theme = getTheme();

  // Enhanced API Functions (same as before)
  const bookTransportation = async (service, destination = 'Downtown') => {
    setLoading(true);
    try {
      const response = await axios.post(`${API_BASE}/bookings/transportation`, {
        service,
        destination
      });
      
      const newBooking = {
        id: response.data.booking_id,
        type: 'Transportation',
        service: service,
        destination: destination,
        status: 'Confirmed',
        time: new Date().toLocaleString(),
        eta: response.data.eta || '5-10 minutes'
      };
      setBookings(prev => [newBooking, ...prev]);
      
      const newNotification = {
        id: Date.now(),
        message: `${service} ride booked - ETA: ${response.data.eta || '5-10 min'}`,
        time: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),
        type: 'success'
      };
      setNotifications(prev => [newNotification, ...prev]);
      
      alert(`‚úÖ ${response.data.message}\nBooking ID: ${response.data.booking_id}`);
    } catch (error) {
      const demoBooking = {
        id: Math.floor(Math.random() * 1000),
        type: 'Transportation',
        service: service,
        destination: destination,
        status: 'Confirmed',
        time: new Date().toLocaleString(),
        eta: '5-10 minutes'
      };
      setBookings(prev => [demoBooking, ...prev]);
      
      const notification = {
        id: Date.now(),
        message: `${service} ride booked - ETA: 5-10 min (Demo)`,
        time: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),
        type: 'success'
      };
      setNotifications(prev => [notification, ...prev]);
      
      alert(`‚úÖ ${service} ride booked! (Demo mode)\nBooking ID: ${demoBooking.id}`);
    }
    setLoading(false);
  };

  const bookRestaurant = async (restaurantName, time = '7:00 PM', date = new Date().toLocaleDateString()) => {
    setLoading(true);
    try {
      const response = await axios.post(`${API_BASE}/bookings/restaurant`, {
        restaurant_name: restaurantName,
        date,
        time,
        party_size: 2
      });
      
      const newBooking = {
        id: response.data.booking_id,
        type: 'Restaurant',
        restaurant: restaurantName,
        date: date,
        time: time,
        status: 'Confirmed',
        partySize: 2,
        bookingTime: new Date().toLocaleString()
      };
      setBookings(prev => [newBooking, ...prev]);
      
      const newNotification = {
        id: Date.now(),
        message: `Table reserved at ${restaurantName} for ${time}`,
        time: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),
        type: 'success'
      };
      setNotifications(prev => [newNotification, ...prev]);
      
      alert(`‚úÖ ${response.data.message}\nBooking ID: ${response.data.booking_id}`);
    } catch (error) {
      const demoBooking = {
        id: Math.floor(Math.random() * 1000),
        type: 'Restaurant',
        restaurant: restaurantName,
        date: date,
        time: time,
        status: 'Confirmed',
        partySize: 2,
        bookingTime: new Date().toLocaleString()
      };
      setBookings(prev => [demoBooking, ...prev]);
      
      const notification = {
        id: Date.now(),
        message: `Table reserved at ${restaurantName} for ${time} (Demo)`,
        time: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),
        type: 'success'
      };
      setNotifications(prev => [notification, ...prev]);
      
      alert(`‚úÖ Table reserved at ${restaurantName}! (Demo mode)\nBooking ID: ${demoBooking.id}`);
    }
    setLoading(false);
  };

  const quickOrder = async (itemName) => {
    setLoading(true);
    try {
      const response = await axios.post(`${API_BASE}/bookings/restaurant`, {
        restaurant_name: 'Room Service',
        date: new Date().toLocaleDateString(),
        time: 'Now',
        special_requests: `Quick order: ${itemName}`
      });
      
      const newBooking = {
        id: response.data.booking_id,
        type: 'Room Service',
        item: itemName,
        status: 'Preparing',
        orderTime: new Date().toLocaleString(),
        estimatedDelivery: '30-45 minutes'
      };
      setBookings(prev => [newBooking, ...prev]);
      
      const newNotification = {
        id: Date.now(),
        message: `Room service: ${itemName} - ETA: 30-45 min`,
        time: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),
        type: 'success'
      };
      setNotifications(prev => [newNotification, ...prev]);
      
      alert(`‚úÖ Room service ordered: ${itemName}\nEstimated delivery: 30-45 minutes`);
    } catch (error) {
      const demoBooking = {
        id: Math.floor(Math.random() * 1000),
        type: 'Room Service',
        item: itemName,
        status: 'Preparing',
        orderTime: new Date().toLocaleString(),
        estimatedDelivery: '30-45 minutes'
      };
      setBookings(prev => [demoBooking, ...prev]);
      
      const notification = {
        id: Date.now(),
        message: `Room service: ${itemName} - ETA: 30-45 min (Demo)`,
        time: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),
        type: 'success'
      };
      setNotifications(prev => [notification, ...prev]);
      
      alert(`‚úÖ ${itemName} ordered! Arriving in 30-45 minutes (Demo mode)`);
    }
    setLoading(false);
  };

  // Staff Dashboard View
  if (currentView === 'staff') {
    return <HotelStaffDashboard />;
  }

  // [Include all other guest app views and components here - same as the previous complete code]
  // For brevity, I'll show just the main return with the staff dashboard integration

  // Main Home View
  return (
    <div style={{ minHeight: '100vh', background: theme.background }}>
      {/* Header */}
      <div style={{ background: theme.headerBg, padding: '20px 40px', display: 'flex', justifyContent: 'space-between', alignItems: 'center', borderBottom: darkMode ? '1px solid rgba(255,255,255,0.1)' : '1px solid rgba(0,0,0,0.1)' }}>
        <div style={{ display: 'flex', alignItems: 'center', gap: '32px' }}>
          <h1 style={{ fontSize: '28px', fontWeight: '600', background: 'linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%)', backgroundClip: 'text', WebkitBackgroundClip: 'text', WebkitTextFillColor: 'transparent', margin: 0 }}>digierge</h1>
          <div style={{ color: theme.textSecondary, fontSize: '16px', fontWeight: '500' }}>
            <span style={{ color: theme.textPrimary, fontWeight: '600' }}>The Grand Hotel</span>
          </div>
        </div>
        <div style={{ display: 'flex', alignItems: 'center', gap: '24px' }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '16px', background: 'rgba(59,130,246,0.1)', padding: '8px 16px', borderRadius: '12px' }}>
            <span style={{ fontSize: '16px' }}>üíé</span>
            <span style={{ color: '#3b82f6', fontWeight: '600', fontSize: '14px' }}>{guestProfile.loyaltyPoints} pts</span>
          </div>
          <button onClick={() => setCurrentView('notifications')} style={{ position: 'relative', background: 'rgba(59,130,246,0.1)', border: 'none', borderRadius: '12px', padding: '12px', cursor: 'pointer' }}>
            <span style={{ fontSize: '18px' }}>üîî</span>
            {notifications.length > 0 && <div style={{ position: 'absolute', top: '4px', right: '4px', width: '8px', height: '8px', background: '#ef4444', borderRadius: '50%' }}></div>}
          </button>
          <button onClick={() => setCurrentView('bookings')} style={{ background: 'rgba(59,130,246,0.1)', border: 'none', borderRadius: '12px', padding: '12px', cursor: 'pointer' }}>
            <span style={{ fontSize: '18px' }}>üìã</span>
          </button>
          <select value={language} onChange={(e) => setLanguage(e.target.value)} style={{ background: 'rgba(59,130,246,0.1)', border: '1px solid rgba(59,130,246,0.2)', borderRadius: '8px', padding: '8px 12px', fontSize: '14px', fontWeight: '500', color: '#3b82f6', cursor: 'pointer' }}>
            <option value="en">üá∫üá∏ EN</option>
            <option value="es">üá™üá∏ ES</option>
            <option value="ar">üá∏üá¶ AR</option>
          </select>
          <button onClick={() => setDarkMode(!darkMode)} style={{ background: 'rgba(59,130,246,0.1)', border: 'none', borderRadius: '12px', padding: '12px', cursor: 'pointer' }}>
            <span style={{ fontSize: '16px' }}>{darkMode ? '‚òÄÔ∏è' : 'üåô'}</span>
          </button>
        </div>
      </div>

      {/* Welcome Section */}
      <div style={{ padding: '40px' }}>
        <div style={{ marginBottom: '40px', background: theme.cardBg, borderRadius: '24px', padding: '40px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <div>
              <h1 style={{ fontSize: '48px', fontWeight: '400', color: theme.textPrimary, marginBottom: '12px' }}>{getGreeting()[language]}, {guestProfile.name}</h1>
              <h2 style={{ fontSize: '32px', fontWeight: '600', color: '#3b82f6', marginBottom: '15px' }}>{t.welcome} Digierge</h2>
              <p style={{ fontSize: '20px', color: theme.textSecondary }}>Room {guestProfile.room} ‚Ä¢ {t.subtitle}</p>
              <div style={{ display: 'flex', gap: '12px', marginTop: '16px' }}>
                {guestProfile.preferences.map((pref, index) => (
                  <span key={index} style={{ background: 'rgba(59,130,246,0.1)', color: '#3b82f6', padding: '6px 12px', borderRadius: '20px', fontSize: '12px', fontWeight: '600' }}>{pref}</span>
                ))}
              </div>
            </div>
            <div style={{ textAlign: 'right', background: 'linear-gradient(135deg, rgba(59,130,246,0.1) 0%, rgba(147,51,234,0.1) 100%)', padding: '30px', borderRadius: '20px' }}>
              <div style={{ fontSize: '36px', marginBottom: '10px' }}>{weather.icon}</div>
              <p style={{ fontSize: '24px', fontWeight: '300', color: theme.textPrimary, marginBottom: '10px' }}>{currentTime.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</p>
              <p style={{ fontSize: '16px', color: theme.textSecondary, fontWeight: '500' }}>{weather.temp}¬∞C ‚Ä¢ {weather.condition}</p>
            </div>
          </div>
        </div>

        {/* Services Grid */}
        <div>
          <h2 style={{ fontSize: '28px', fontWeight: '600', color: theme.textPrimary, marginBottom: '24px' }}>{t.services}</h2>
          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', gap: '20px' }}>
            {services.map((service) => (
              <button 
                key={service.id} 
                onClick={() => { setSelectedService(service); setCurrentView('service'); }} 
                style={{ 
                  background: theme.cardBg, 
                  borderRadius: '24px', 
                  padding: '24px', 
                  border: 'none', 
                  cursor: 'pointer', 
                  textAlign: 'center', 
                  transition: 'all 0.3s ease',
                  boxShadow: '0 4px 20px -4px rgba(0,0,0,0.1)'
                }}
              >
                <div style={{ width: '48px', height: '48px', background: service.color, borderRadius: '16px', marginBottom: '16px', display: 'flex', alignItems: 'center', justifyContent: 'center', fontSize: '20px', margin: '0 auto 16px' }}>{service.icon}</div>
                <h3 style={{ fontSize: '16px', fontWeight: '600', color: theme.textPrimary, marginBottom: '8px' }}>{service.title[language]}</h3>
                <p style={{ fontSize: '12px', color: theme.textSecondary, margin: 0 }}>{service.description[language]}</p>
              </button>
            ))}
          </div>
        </div>

        {/* Quick Actions */}
        <div style={{ marginTop: '40px' }}>
          <h2 style={{ fontSize: '24px', fontWeight: '600', color: theme.textPrimary, marginBottom: '20px' }}>Quick Actions</h2>
          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '16px' }}>
            <button 
              style={{ 
                background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)', 
                color: 'white', 
                padding: '16px 20px', 
                borderRadius: '16px', 
                border: 'none', 
                cursor: loading ? 'not-allowed' : 'pointer', 
                fontWeight: '600', 
                fontSize: '14px',
                opacity: loading ? 0.7 : 1
              }}
              onClick={() => quickOrder('Club Sandwich')}
              disabled={loading}
            >
              üõéÔ∏è {loading ? 'Ordering...' : t.quickOrder}
            </button>
            <button 
              style={{ 
                background: 'linear-gradient(135deg, #3b82f6 0%, #1e40af 100%)', 
                color: 'white', 
                padding: '16px 20px', 
                borderRadius: '16px', 
                border: 'none', 
                cursor: loading ? 'not-allowed' : 'pointer', 
                fontWeight: '600', 
                fontSize: '14px',
                opacity: loading ? 0.7 : 1
              }}
              onClick={() => bookTransportation('Uber')}
              disabled={loading}
            >
              üöó {loading ? 'Booking...' : t.bookRide}
            </button>
            <button 
              style={{ 
                background: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)', 
                color: 'white', 
                padding: '16px 20px', 
                borderRadius: '16px', 
                border: 'none', 
                cursor: loading ? 'not-allowed' : 'pointer', 
                fontWeight: '600', 
                fontSize: '14px',
                opacity: loading ? 0.7 : 1
              }}
              onClick={() => bookRestaurant('Le Jardin')}
              disabled={loading}
            >
              üçΩÔ∏è {loading ? 'Booking...' : t.reserve}
            </button>
          </div>
        </div>

        {/* Admin Dashboard Link */}
        <div style={{ marginTop: '40px', textAlign: 'center' }}>
          <button 
            onClick={() => setCurrentView('staff')}  // Updated to open staff dashboard
            style={{ 
              background: 'rgba(31, 41, 55, 0.8)', 
              color: 'white', 
              padding: '8px 16px', 
              borderRadius: '20px', 
              border: 'none', 
              cursor: 'pointer', 
              fontSize: '12px', 
              opacity: 0.7,
              fontWeight: '500'
            }}
          >
            üè® Staff Dashboard
          </button>
        </div>
      </div>
    </div>
  );
};

const AppWithRouter = () => {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/*" element={<App />} />
      </Routes>
    </BrowserRouter>
  );
};

export default AppWithRouter;